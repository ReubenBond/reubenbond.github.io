<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>reublog</title>
		<link>http://reubenbond.github.io/</link>
		<description>reublog</description>
		<copyright>2017</copyright>
		<pubDate>Tue, 31 Oct 2017 13:19:00 GMT</pubDate>
		<lastBuildDate>Tue, 31 Oct 2017 13:19:00 GMT</lastBuildDate>
		<item>
			<title>Deploying Wyam GitHub Using Visual Studio Online</title>
			<link>http://reubenbond.github.io/posts/2017-Oct-30-setting-up-wyam</link>
			<description>&lt;p&gt;Here goes nothing! This blog is built with &lt;a href="https://twitter.com/daveaglick"&gt;Dave Glick's&lt;/a&gt; &lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt; static site generator and deployed from a git repo in Visual Studio Online to GitHub Pages. Here's how to set up something similar.&lt;/p&gt;</description>
			<enclosure url="http://reubenbond.github.io/images/header.jpg" length="0" type="image" />
			<guid>http://reubenbond.github.io/posts/2017-Oct-30-setting-up-wyam</guid>
			<pubDate>Mon, 30 Oct 2017 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Here goes nothing! This blog is built with &lt;a href="https://twitter.com/daveaglick"&gt;Dave Glick's&lt;/a&gt; &lt;a href="https://wyam.io/"&gt;Wyam&lt;/a&gt; static site generator and deployed from a git repo in Visual Studio Online to GitHub Pages. Here's how to set up something similar.&lt;/p&gt;
&lt;h1 id="prerequisites"&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;A Visual Studio Online repository for your blog source.
&lt;ul&gt;
&lt;li&gt;You could have also VSO pull the source from GitHub or somewhere else instead, but I haven't covered that here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;A GitHub repository which will serve the compiled output via GitHub Pages.
&lt;ul&gt;
&lt;li&gt;I created a repository called &lt;a href="https://github.com/ReubenBond/reubenbond.github.io"&gt;&lt;code&gt;reubenbond.github.io&lt;/code&gt;&lt;/a&gt; under my profile, &lt;a href="https://github.com/ReubenBond/"&gt;&lt;code&gt;ReubenBond&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cake so you can test it out locally. Install it via &lt;a href="https://chocolatey.org/"&gt;Chocolatey&lt;/a&gt;: &lt;code&gt;choco install cake.portable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="kick-starting-wyam-with-cake"&gt;Kick-starting Wyam with Cake&lt;/h1&gt;
&lt;p&gt;Create a file called &lt;code&gt;build.cake&lt;/code&gt; in the root of your repo with these contents:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;#tool nuget:?package=Wyam
#addin nuget:?package=Cake.Wyam

var target = Argument(&amp;quot;target&amp;quot;, &amp;quot;Default&amp;quot;);

Task(&amp;quot;Build&amp;quot;)
   .Does(() =&amp;gt;
   {
       Wyam(new WyamSettings
       {
           Recipe = &amp;quot;Blog&amp;quot;,
           Theme = &amp;quot;CleanBlog&amp;quot;,
           UpdatePackages = true
       });
   });
   
Task(&amp;quot;Preview&amp;quot;)
   .Does(() =&amp;gt;
   {
       Wyam(new WyamSettings
       {
           Recipe = &amp;quot;Blog&amp;quot;,
           Theme = &amp;quot;CleanBlog&amp;quot;,
           UpdatePackages = true,
           Preview = true,
           Watch = true
       });        
   });

Task(&amp;quot;Default&amp;quot;)
   .IsDependentOn(&amp;quot;Build&amp;quot;);    
   
RunTarget(target);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add a file called &lt;code&gt;config.wyam&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;#recipe Blog
#theme CleanBlog

Settings[Keys.Host] = &amp;quot;yourname.github.io&amp;quot;;
Settings[BlogKeys.Title] = &amp;quot;MegaBlog&amp;quot;;
Settings[BlogKeys.Description] = &amp;quot;Blog of the Gods&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a folder called &lt;code&gt;input&lt;/code&gt; and add a folder called &lt;code&gt;posts&lt;/code&gt; inside that.
Now create &lt;code&gt;input/posts/fist-post.md&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Title: Fist Post! A song of fice and ire
Published: 10/30/2017
Tags: ['Fists']
---

This post is about fists and how clumpy they always are.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Great! Try running it using Cake. Because Wyam targets an older version of Cake at the time of writing, I'm adding the &lt;code&gt;--settings_skipverification=true&lt;/code&gt; option so that Cake doesn't complain.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cake --settings_skipverification=true -target=Preview
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Open a browser to &lt;a href="http://localhost:5080"&gt;http://localhost:5080&lt;/a&gt; and see the results. The &lt;code&gt;Preview&lt;/code&gt; target watches for file changes so it can automatically recompile &amp;amp; refresh your browser whenever you save changes.&lt;/p&gt;
&lt;h1 id="automating-deployment"&gt;Automating Deployment&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Install the &lt;a href="https://marketplace.visualstudio.com/items?itemName=cake-build.cake"&gt;Cake build task from the Visual Studio Marketplace&lt;/a&gt; into VSO.&lt;/li&gt;
&lt;li&gt;In Visual Studio Online, create a new, empty build for your repo, selecting an appropriate build agent.&lt;/li&gt;
&lt;li&gt;Add the Cake Build task.&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;build.cake&lt;/code&gt; file from the root of your repo as the &lt;em&gt;Cake Script&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Set the &lt;em&gt;Target&lt;/em&gt; to &lt;code&gt;Default&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Optionally add the &lt;code&gt;--settings_skipverification=true&lt;/code&gt; option to &lt;em&gt;Cake Arguments&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Add a new &lt;em&gt;PowerShell Script&lt;/em&gt; build task, set &lt;em&gt;Type&lt;/em&gt; to &lt;code&gt;Inline Script&lt;/code&gt; and add these contents:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-powershell"&gt;param (
  [string]$Token,
  [string]$UserName,
  [string]$Repository
)

$localFolder = &amp;quot;gh-pages&amp;quot;
$repo = &amp;quot;https://$($UserName):$($Token)&amp;#64;github.com/$($Repository).git&amp;quot;
git clone $repo --branch=master $localFolder

Copy-Item &amp;quot;output\*&amp;quot; $localFolder -recurse

Set-Location $localFolder
git add *
git commit -m &amp;quot;Update.&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="8"&gt;
&lt;li&gt;Create a new GitHub Personal Access token from GitHub's Developer Settings page, or by &lt;a href="https://github.com/settings/tokens/new"&gt;clicking here&lt;/a&gt;. I added all of the &lt;code&gt;repo&lt;/code&gt; permissions to the token.&lt;/li&gt;
&lt;li&gt;In VSO, add arguments for the script, replacing &lt;code&gt;TOKEN&lt;/code&gt; with your token and replacing the other values as appropriate:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;-Token TOKEN -UserName &amp;quot;ReubenBond&amp;quot; -Repository &amp;quot;ReubenBond/reubenbond.github.io&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="10"&gt;
&lt;li&gt;Up on the &lt;em&gt;Triggers&lt;/em&gt; pane, enable Continuous Integration.&lt;/li&gt;
&lt;li&gt;Click &lt;em&gt;Save &amp;amp; queue&lt;/em&gt;, then cross your fingers.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully that's it and you can now add new blog posts to the &lt;code&gt;input/posts&lt;/code&gt; directory.&lt;/p&gt;
</content:encoded>
		</item>
	</channel>
</rss>